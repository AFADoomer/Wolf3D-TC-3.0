class KeyHandler : EventHandler
{
	ui int gooberscount;
	ui int ilmcount;
	ui bool tabdown;
	ui ClassicMessageBox msg;

	bool cheatsenabled;

	override bool InputProcess(InputEvent e)
	{
		if (e.Type == InputEvent.Type_KeyDown)
		{
			if (msg) { msg.Close(); }

			switch (e.KeyScan)
			{
				case InputEvent.Key_F1:
					if (goobers) { Menu.SetMenu("Startup"); }
					else { Menu.SetMenu("HelpMenu"); }
					return true;
					break;
				case InputEvent.Key_LShift:
				case InputEvent.Key_LAlt:
				case InputEvent.Key_Backspace:
					if (goobers && !cheatsenabled) { gooberscount++; }
					break;
				case InputEvent.Key_Tab:
					if (goobers && cheatsenabled)
					{
						tabdown = true;
						return true;
					}
				default:
					break;
			}

			switch (e.KeyChar)
			{
				case 101: // E
					if (tabdown)
					{
						Exit_Normal(0);
						return true;
					}
					break;
				case 103: // G
					if (tabdown)
					{
						String text;
						if (players[consoleplayer].cheats & CF_GODMODE2) { text = StringTable.Localize("$CHEAT_GOD_OFF"); }
						else { text = StringTable.Localize("$CHEAT_GOD_ON"); }

						msg = ClassicMessageBox.PrintMessage(text, width:12, height:2, align:2);

						SendNetworkEvent("godmode");
						return true;
					}
					break;
				case 105: // I
					if (tabdown)
					{
						String text = StringTable.Localize("$CHEAT_ITEMS");
						msg = ClassicMessageBox.PrintMessage(text, width:12, height:3, align:2);

						SendNetworkEvent("items");
						return true;
						break;
					}
				case 108: // L
				case 109: // M
					ilmcount++;
					break;
				case 113: // Q
					if (tabdown)
					{
						Menu.SetMenu("QuitMenu");
						return true;
					}
					break;
				default:
					break;
			}
		}
		else if (e.Type == InputEvent.Type_KeyUp)
		{
			switch (e.KeyScan)
			{
				case InputEvent.Key_LShift:
				case InputEvent.Key_LAlt:
				case InputEvent.Key_Backspace:
					if (goobers) { gooberscount--; }
					break;
				case InputEvent.Key_Tab:
					if (goobers && cheatsenabled) { tabdown = false; }
				default:
					break;
			}

			switch (e.KeyChar)
			{
				case 105:
				case 108:
				case 109:
					ilmcount--;
					break;
				default:
					break;
			}
		}

		if (gooberscount == 3)
		{
			String text = StringTable.Localize("$GOOBERS");
			msg = ClassicMessageBox.PrintMessage(text, "BG_", 0x8c8c8c, 1);

			SendNetworkEvent("cheatsenabled");

			return true;
		}

		if (ilmcount == 3)
		{
			String text = StringTable.Localize("$CHEAT_ILM");
			msg = ClassicMessageBox.PrintMessage(text, "BG_", 0x8c8c8c, 1);

			SendNetworkEvent("ilm");

			return true;
		}

		return false;
	}

	override void NetworkProcess(ConsoleEvent e)
	{
		if (!sv_cheats && (netgame || deathmatch)) { return; }

		let mo = players[e.Player].mo;

		if (e.Name == "ilm")
		{
			if (mo)
			{
				mo.GiveInventory("YellowKey", 1);
				mo.GiveInventory("BlueKey", 1);
				mo.GiveInventory("WolfClip", 99);
				mo.health = 100;

				mo.TakeInventory("Score", 0x7FFFFFFF);
			}
		}
		else if (e.Name == "cheatsenabled")
		{
			cheatsenabled = true;
		}
		else if (cheatsenabled)
		{
			if (e.Name == "godmode")
			{
				players[e.Player].cheats ^= CF_GODMODE2;
			}
			else if (e.Name == "items")
			{
				mo.GiveInventory("Score", 100000);
				mo.health = 100;
				mo.GiveInventory("WolfClip", 99);

				class<Weapon> wpn = "WolfMachineGun";

				if (mo.FindInventory(wpn)) { wpn = "WolfChaingun"; }

				mo.GiveInventory(wpn, 1);

				let current = Weapon(mo.Findinventory(wpn));
				if (mo.player.ReadyWeapon != current) { mo.player.PendingWeapon = current; }
			}
		}
	}

}