#library "WLF3DLIB"
#include "zcommon.acs"

int polydoors[255][5];
int	PushWalls[255];
int	intPushWallMoveDist = 128.0;
str Ceilings[21] = {"98", "1d", "2d", "2e", "4d", "4e", "4f", "6f", "7d", "7f", "8d", "9d", "9e", "ae", "bf", "d7", "dc", "dd", "de", "df", "e1"};
str WolfCeilings[60] = {"1d", "1d", "1d", "1d", "1d", "1d", "1d", "1d", "1d", "bf", "4e", "4e", "4e", "1d", "8d", "4e", "1d", "2d", "1d", "8d", "1d", "1d", "1d", "1d", "1d", "2d", "dd", "1d", "1d", "98", "1d", "9d", "2d", "dd", "dd", "9d", "2d", "4d", "1d", "dd", "7d", "1d", "2d", "2d", "dd", "d7", "1d", "1d", "1d", "2d", "1d", "1d", "1d", "1d", "dd", "dd", "7d", "dd", "dd", "dd"};
str SoDCeilings[21] = {"6f", "4f", "1d", "de", "df", "2e", "7f", "9e", "ae", "7f", "1d", "de", "df", "de", "df", "de", "e1", "dc", "2e", "1d", "dc"};
global int 18:SecretMarkers[];

Function int WolfCoord(int intCoord)
{
	int intReturn = 0;
	intCoord = intCoord / 1.0;
	intCoord = (intCoord + 2048 - 32) / 64;
	return intCoord;
}

Function void FadeToBlack (int holdTime, int inTime, int outTime, int font)
{
	SetHudSize(320, 200, 1);

	if (!font) { font = "BLACK"; }

	SetFont(font);
	HudMessage (s:"A"; 3, 0, -1, 160.0, 100.0, holdTime, inTime, outTime);
}

Script "InitializeLevel" OPEN
{
	if (GetLevelInfo(LEVELINFO_LEVELNUM) > 100) { ACS_NamedExecute("W_SetCeilingColor", 0, 0); }
}

Script "RespawnPlayer" RESPAWN
{
	ACS_NamedExecute("InitializePlayer", 0);
}

Script "InitializePlayer" (int playernum)
{
	if (!ScriptCall("GameHandler", "CheckEpisode", ""))
	{
		ScriptCall("WolfMenu", "SetMenu", "IntroSlideShow");
		Terminate;
	}

	if (GameType() != GAME_TITLE_MAP)
	{
		int lives = ScriptCall("LifeHandler", "GetLives");
		int justdied = ScriptCall("LifeHandler", "JustDied", playernum);

		if (lives == -1 && justdied)
		{
			SetPlayerProperty(0, 1, PROP_TOTALLYFROZEN);
			ScriptCall("WolfMenu", "SetMenu", "HighScores");
			SetMusic("HITLWLTZ");
			ScriptCall("ClassicStatusBar", "ClearFizzle");
		}
		else
		{
			if (justdied)
			{
				ScriptCall("ClassicStatusBar", "ReverseFizzle");
			}
			else if (!GetCVar("g_nointro"))
			{
				ScriptCall("WolfMenu", "SetMenu", "GetPsyched");
				ScriptCall("ClassicStatusBar", "ClearFizzle");
			}
		}
	}
}

Script 1 (int po, int dir, int lock)
{
	ACS_NamedExecuteAlways("W_DoSlidingDoor", 0, po, dir, lock);
}

Script 2 (int po, int dir)
{
	ACS_NamedExecuteAlways("W_DoSecretDoor", 0, po, dir);
}

Script 4 (int type)
{
	if (GameType() == GAME_NET_DEATHMATCH) { Terminate; }

	if (type == 2)
	{
		ScriptCall("Menu", "SetMenu", "SoDEnd");
		Terminate;
	}

	ACS_NamedExecuteWait("W_VictorySetup", 0, 0, 0, 64);
		
	Delay(1);

	SetActorProperty(ActivatorTID(), APROP_RenderStyle, 0);
	Thing_Activate (2);
	ChangeCamera(2,1,0);
	Delay(35);
	SetActorProperty(1, APROP_RenderStyle, 1);
	Thing_Activate (1);
	Delay(200);

	FadeToBlack(5.0, 0.5, 0.0, 0);

	Delay(18);

	Exit_Normal(0);
}

Script 10 (int Type)
{
	Delay(15); // Give time for the switch animation and sound to play

	FadeToBlack(5.0, 0.5, 0.0, 0);

	Delay(18);

	if (Type) { Exit_Secret(0); }
	else { Exit_Normal(0); }
}

Script 15 (int WallID)
{}

Script 27 (void)
{
	ACS_NamedExecuteAlways("W_DeathCam", 0);
}

Script 601 (void)
{}

#define DOOR_CLOSED 0
#define DOOR_FIRSTOPENING 1
#define DOOR_OPENED 2
#define DOOR_CLOSING 3
#define DOOR_OPENING 4

#define START_X 0
#define START_Y 1
#define END_X 2
#define END_Y 3
#define DOOR_STATE 4

//Polyobject Doors
Script "W_DoSlidingDoor" (int po, int dir, int lock)
{
	int index = po - 1;
	bool bAccess = false;

	if (polydoors[index][START_X] == 0 && polydoors[index][START_Y] == 0)
	{
		polydoors[index][START_X] = GetPolyObjX(po) >> 16;
		polydoors[index][END_X] = polydoors[index][START_X];
		polydoors[index][START_Y] = GetPolyObjY(po) >> 16;
		polydoors[index][END_Y] = polydoors[index][START_Y];

		if (dir == 1)
		{
			polydoors[index][END_Y] -= 64;
		}
		else if (dir == 2)
		{
			polydoors[index][END_X] += 64;
		}
	}

	switch (lock)
	{
		case 1:
			bAccess = CheckInventory("BlueKey") || CheckInventory("BlueKeyLost");
			break;
		case 2:
			bAccess = CheckInventory("YellowKey") || CheckInventory("YellowKeyLost");
			break;
		case 5:
			bAccess = !!(PlayerNumber() < 0);
			break;
		default:
			bAccess = true;
			break;
	}

	if (!bAccess)
	{
		if (lock != 5) { ActivatorSound("*usefail", 127); }
		Terminate;
	}

	int d = 0;

	if (polydoors[index][DOOR_STATE] == DOOR_CLOSED || polydoors[index][DOOR_STATE] == DOOR_CLOSING)
	{
		if (GetCVar("g_sod") > 1) { ActivatorSound("door/open2", 127); }
		else { ActivatorSound("door/classic/open", 127); }

		if (polydoors[index][DOOR_STATE] == DOOR_CLOSED) { polydoors[index][DOOR_STATE] = DOOR_FIRSTOPENING; }
		else { polydoors[index][DOOR_STATE] = DOOR_OPENING; }

		if (lock == 5 && !ActivatorTID()) { Thing_Deactivate(0); }

		PolyObj_Stop(po);
		Polyobj_MoveTo(po, 16, polydoors[index][END_X], polydoors[index][END_Y]);

		d = 0;
		while (d <= 30 && (polydoors[index][DOOR_STATE] == DOOR_OPENING || polydoors[index][DOOR_STATE] == DOOR_FIRSTOPENING))
		{
			Delay(1);
			d++;
		}

		if (
			(polydoors[index][DOOR_STATE] == DOOR_OPENING || polydoors[index][DOOR_STATE] == DOOR_FIRSTOPENING) &&
			GetPolyObjX(po) >> 16 == polydoors[index][END_X] && GetPolyObjY(po) >> 16 == polydoors[index][END_Y]
		)
		{
			polydoors[index][DOOR_STATE] = DOOR_OPENED;
		}
		else { Terminate; }

		if (lock == 5 && !ActivatorTID()) { Thing_Activate(0); }

		d = 0;
		while (d <= 120 && polydoors[index][DOOR_STATE] == DOOR_OPENED)
		{
			Delay(1);
			d++;
		}

		if (polydoors[index][DOOR_STATE] != DOOR_OPENED) { Terminate; }
	}

	if (polydoors[index][DOOR_STATE] == DOOR_OPENED || polydoors[index][DOOR_STATE] == DOOR_OPENING)
	{
		if (GetCVar("g_sod") > 1) { ActivatorSound("door/close2", 127); }
		else { ActivatorSound("door/classic/close", 127); }

		polydoors[index][DOOR_STATE] = DOOR_CLOSING;

		PolyObj_Stop(po);
		Polyobj_MoveTo(po, 16, polydoors[index][START_X], polydoors[index][START_Y]);

		d = 0;
		while (d <= 30 && polydoors[index][DOOR_STATE] == DOOR_CLOSING)
		{
			Delay(1);
			d++;
		}

		if (polydoors[index][DOOR_STATE] == DOOR_CLOSING && GetPolyObjX(po) >> 16 == polydoors[index][START_X] && GetPolyObjY(po) >> 16 == polydoors[index][START_Y])
		{
			polydoors[index][DOOR_STATE] = DOOR_CLOSED;
		}
	}
}

//Secret Doors
Script "W_DoSecretDoor" (int po, int Angle)
{
	int intSpawnDist = 64.0;
	int intMaxMove = GetCvar("g_maxpushwallmove");

	If (intMaxMove == 0)
	{
		intMaxMove = 2;
	}

	If (!PushWalls[po] || (GetCvar("g_infinitepushwalls") == 1))
	{
		int PolyX = GetPolyObjX(po) + 24.0;
		int PolyY = GetPolyObjY(po);

		int originX, originY, destX, destY, moveX, moveY, intMoveDist;

		moveX = 0;
		moveY = 0;

		Switch (Angle)
		{
			Case 0:
				moveX = 1;
			break;
			Case 64:
				moveY = 1;
			break;
			Case 128:
				moveX = -1;
			break;
			Case 192:
				moveY = -1;
			break;
		}

		originX = PolyX + (32.0 * moveX);
		originY = PolyY + (32.0 * moveY);

		Spawn("Secret_Check", originX, originY, 0, 1900 + po, 0);

		For (int i=1; i<=intMaxMove; i=i+1)
		{
			destX = originX + (moveX * 64.0 * i) - (32.0 * moveX);
			destY = originY + (moveY * 64.0 * i) - (32.0 * moveY);

			If (Spawn("Secret_Block", destX, destY, 0, 2000 + po, 0)) //Check if no object is in the way
			{
				If(CheckSight (2000 + po, 1900 + po, CSF_NOBLOCKALL)) //Check if destination is inside map
					intMoveDist += 64.0;
				Thing_Remove(2000 + po);
			}
		}
		Thing_Remove(1900 + po);

		If (intMoveDist > 0)
		{
			PushWalls[po] = 1;

			PolyObj_Move(po, 8, Angle, intMoveDist/1.0);

			if (GetCVar("g_sod") > 1) { ActivatorSound("door/secret2", 127); }
			else { AmbientSound("door/classic/secret",127); }

			PolyX = GetPolyObjX(po) + 24.0;
			PolyY = GetPolyObjY(po);

			If (SecretMarkers[WolfCoord(PolyX + (intMoveDist * moveX)) * 64 + WolfCoord(PolyY + (intMoveDist * moveY))] != 0)
				PushWalls[po] = 0;
		}

		Thing_Remove(2000+po);
	}
}

Script "W_PlayerDeath" DEATH //501
{
	If (PlayerCount() == 1) { SetMusic(""); }

	Delay(35);

	ScriptCall("ClassicStatusBar", "DoFizzle", 0xFF0000);
}

Script "W_DeathCam" (void)
{
	SetPlayerProperty(1, 2, PROP_INVULNERABILITY);

	Delay(15);

	ScriptCall("ClassicStatusBar", "DoFizzle", 0x000000);

	Delay(45);

	//Set Activator to Death Cam replay state
	SetActorState (0, "Death.Cam", true);

	ScriptCall("Menu", "SetMenu", "DeathCamMessage");

	Delay(18);

	ScriptCall("ClassicStatusBar", "DoFizzle", 0x000000, true);

	SetActivatorToTarget(ActivatorTID());

	SetPlayerProperty(1, 1, PROP_NOTARGET);
	SetPlayerProperty (1, 1, PROP_TOTALLYFROZEN);

	Delay(3 * 35);

	ChangeCamera(999, 1, 0);

	Delay(6 * 35);

	Exit_Normal(0);
}

Script "W_PlayerRespawn" RESPAWN
{
	Delay(1);
	ScriptCall("ClassicStatusBar", "ClearFizzle");
}

Script "W_VictorySetup" (int StartX, int StartY, int BitAngle)
{
	If (StartX == 0 && StartY == 0)
	{
		StartX = GetActorX(0);
		StartY = GetActorY(0);
	}
	Else
	{
		StartX = StartX * 1.0;
		StartY = StartY * 1.0;
	}

	if (BitAngle == 0) { BitAngle = GetActorAngle(0) >> 8; }

	int Angle = BitAngle << 8;

	int OffsetX;
	int OffsetY;

	OffsetX = cos(Angle) * 32;
	OffsetY = sin(Angle) * 32;

	SpawnForced ("InterpolationPoint", StartX + OffsetX, StartY + OffsetY, 32.0, 3, BitAngle);
	SetThingSpecial (3, 0, 0, 2, 0, 4);

	OffsetX = cos(Angle) * 64;
	OffsetY = sin(Angle) * 64;

	SpawnForced ("InterpolationPoint", StartX + OffsetX, StartY + OffsetY, 32.0, 4, BitAngle);
	SetThingSpecial (4, 0, 0, 10, 0, 5);

	OffsetX = cos(Angle) * 128;
	OffsetY = sin(Angle) * 128;

	SpawnForced ("InterpolationPoint", StartX + OffsetX, StartY + OffsetY, 32.0, 5, BitAngle + 128);
	SetThingSpecial (5, 0, 0, 6, 0, 6);

	OffsetX = cos(Angle) * 224;
	OffsetY = sin(Angle) * 224;

	SpawnForced ("InterpolationPoint", StartX + OffsetX, StartY + OffsetY, 32.0, 6, BitAngle + 128);
	SetThingSpecial (6, 0, 0, 0, 0, 0);

	OffsetX = cos(Angle) * -32;
	OffsetY = sin(Angle) * -32;

	SpawnForced ("InterpolationPoint", StartX + OffsetX, StartY + OffsetY, 32.0, 7, BitAngle);
	SetThingSpecial (7, 0, 0, 4, 0, 3);

	OffsetX = cos(Angle) * 224;
	OffsetY = sin(Angle) * 224;

	SpawnForced ("PatrolPoint", StartX + OffsetX, StartY + OffsetY, 32.0, 9, BitAngle);

	OffsetX = cos(Angle) * -96;
	OffsetY = sin(Angle) * -96;

	SpawnForced ("MovingCamera", StartX + OffsetX, StartY + OffsetY, 32.0, 2, BitAngle);
	SetThingSpecial (2, 0, 7, 0, 3);

	SpawnForced ("BJ", StartX, StartY, 32, 1, BitAngle);
	Thing_Deactivate(1);
	SetThingSpecial (1, 229, 0, 9, 1);
}

//Ceiling Colors
Script "W_SetCeilingColor" (int index)
{
	str Color = "CEILING";

	If (!index)
	{
		int num = GetLevelInfo(LEVELINFO_LEVELNUM);	
		if (ScriptCall("Game", "IsSod"))
		{
			index = num % 100 - 1;
			Color = SoDCeilings[index % 60];
		}
		else
		{
			index = (num / 100 - 1) * 10 + num % 100 - 1;
			Color = WolfCeilings[index % 21];
		}
	}
	else
	{
		Color = Ceilings[index % 21];
	}


	ChangeCeiling(0, Color);
	ChangeCeiling(800, Color);
}